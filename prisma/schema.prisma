generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id            Int       @id @default(autoincrement())
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  role          UserRole  @default(USER)
  updatedAt     DateTime  @default(now()) @updatedAt
  username      String
  email         String    @unique
  password      String
  avatar        String
  otpExpiration DateTime?

  chats    chat[]    @relation("UserChats")
  messages message[] @relation("UserMessages")
  Session  Session[]
  OTP      OTP[]

  sentRequests     FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")

  friendsInitiated Friendship[] @relation("InitiatedFriendships")
  friendsReceived  Friendship[] @relation("ReceivedFriendships")
}

model chat {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  conversationId Int

  users    User[]    @relation("UserChats")
  messages message[]
}

model message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  content   String
  chatId    Int
  chat      chat     @relation(fields: [chatId], references: [id])
  senderId  Int
  sender    User     @relation(fields: [senderId], references: [id], name: "UserMessages")
}

model OTP {
  id         Int      @id @default(autoincrement())
  otp        String
  expiration DateTime
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  createdAt  DateTime @default(now())
}

model Session {
  userId       Int    @id
  user         User   @relation(fields: [userId], references: [id])
  refreshToken String @unique
}

model FriendRequest {
  id         Int                 @id @default(autoincrement())
  status     FriendRequestStatus @default(PENDING)
  senderId   Int
  receiverId Int
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @default(now()) @updatedAt

  sender   User @relation("SentRequests", fields: [senderId], references: [id])
  receiver User @relation("ReceivedRequests", fields: [receiverId], references: [id])
}

model Friendship {
  id        Int      @id @default(autoincrement())
  userId    Int
  friendId  Int
  createdAt DateTime @default(now())

  user   User @relation("InitiatedFriendships", fields: [userId], references: [id])
  friend User @relation("ReceivedFriendships", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}
